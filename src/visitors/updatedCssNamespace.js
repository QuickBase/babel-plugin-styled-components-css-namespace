import * as t from 'babel-types';
import {
  isStyled,
  isCSSHelper,
  isInjectGlobalHelper,
  isPureHelper,
  isKeyframesHelper,
  isHelper
} from 'babel-plugin-styled-components/lib/utils/detectors';
import { getCssNamespace } from './cssNamespace';
import { loopWhile } from 'deasync';
import postcss from 'postcss';
import parentSelector from 'postcss-parent-selector';
import unnest from 'postcss-nested';

const EXPRESSION = '_____';

const replacementNodes = new WeakSet();

// const customPlugin = postcss.plugin('customPlugin', config => )

export default (path, state) => {
  const { cssNamespace } = getCssNamespace(state);

  const { node } = path;
  const { tag, quasi: { quasis, expressions } } = node;

  // Ignore nodes generated by this visitor, to prevent infinite loops
  if (replacementNodes.has(node)) return;

  // Ignore templates tagged with anything other than `styled(x)`
  // Inspired by https://github.com/TrevorBurnham/babel-plugin-namespace-styled-components
  if (!isStyled(t)(tag, state)) return;
  if (isKeyframesHelper(t)(tag, state)) return;
  if (isPureHelper(t)(tag, state)) return;
  if (isHelper(t)(tag, state)) return;
  if (isCSSHelper(t)(tag, state)) return;
  if (isInjectGlobalHelper(t)(tag, state)) return;
  if (tag.property && tag.property.name === 'keyframes') return; // Maintain backward compatibility with styled.keyframes

  // Convert the tagged template to a string, with ${} expressions replaced with placeholders
  const originalStyleString = quasis
    .map(
      (quasi, i) =>
        expressions[i] ? quasi.value.raw + EXPRESSION : quasi.value.raw
    )
    .join('');

  const doesPrefixStartsWithSelfReference = cssNamespace.startsWith('&');
  const prefix = doesPrefixStartsWithSelfReference ? cssNamespace : '&';

  const processors = [unnest];
  if (!doesPrefixStartsWithSelfReference) {
    processors.push(parentSelector({ selector: cssNamespace }));
  }

  let formattedCss = null;
  postcss(processors)
    .process(`\n${prefix} {${originalStyleString}}\n`, {
      from: undefined // clears warning about SourceMap and Browserlist from postcss
    })
    .then(value => (formattedCss = value.css));
  loopWhile(() => formattedCss === null);

  const splitCss = formattedCss.split(EXPRESSION);
  const values = splitCss.map((value, index) =>
    t.templateElement(
      { raw: value, cooked: value.replace(/\\\\/g, '\\') },
      index === splitCss.length - 1
    )
  );

  const replacementNode = t.taggedTemplateExpression(
    tag,
    t.templateLiteral(values, expressions)
  );
  replacementNodes.add(replacementNode);

  path.replaceWith(replacementNode);
};
