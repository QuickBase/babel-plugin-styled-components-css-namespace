// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`styled-components-css-namespace 1. adds namespace to simple styled-component: 1. adds namespace to simple styled-component 1`] = `

const styled = { div() {} };

const MyStyledComponent = styled.div\`
  background-color: 'yellow';
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const MyStyledComponent = styled.div\`
  background-color: "yellow";
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 2. adds namespace to complex styled-component: 2. adds namespace to complex styled-component 1`] = `

const styled = { div() {} };

const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? 'red' : 'yellow')};
  color: \${(props) => (props.isDark ? 'white' : 'navy')};
  font-size: 30px;
  padding: 20px;

  & {
    border: 1px solid black;
  }
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? "red" : "yellow")};
  color: \${(props) => (props.isDark ? "white" : "navy")};
  font-size: 30px;
  padding: 20px;

  & {
    border: 1px solid black;
  }
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 3. uses a namespace specified in the options: 3. uses a namespace specified in the options 1`] = `

const styled = { div() {} };

const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? 'red' : 'yellow')};
  color: \${(props) => (props.isDark ? 'white' : 'navy')};
  font-size: 30px;
  padding: 20px;

  & {
    border: 1px solid black;
  }
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? "red" : "yellow")};
  color: \${(props) => (props.isDark ? "white" : "navy")};
  font-size: 30px;
  padding: 20px;

  & {
    border: 1px solid black;
  }
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 4. uses an array of namespaces specified in the options: 4. uses an array of namespaces specified in the options 1`] = `

const styled = { div() {} };

const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? 'red' : 'yellow')};
  color: \${(props) => (props.isDark ? 'white' : 'navy')};
  font-size: 30px;
  padding: 20px;

  & {
    border: 1px solid black;
  }
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? "red" : "yellow")};
  color: \${(props) => (props.isDark ? "white" : "navy")};
  font-size: 30px;
  padding: 20px;

  & {
    border: 1px solid black;
  }
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 6. does not add extra selectors to child helper styles: 6. does not add extra selectors to child helper styles 1`] = `

const styled = { div() {} };
const css = { css() {} };

const styledCSS = css\`
  width: 100px;
\`;

const MyStyledComponent = styled.div\`
  background-color: 'yellow';
  \${styledCSS};
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const css = {
  css() {},
};
const styledCSS = css\`
  width: 100px;
\`;
const MyStyledComponent = styled.div\`
  background-color: "yellow";
  \${styledCSS};
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 7. does not add namespace to keyframes: 7. does not add namespace to keyframes 1`] = `

const styled = { div() {} };

const mymove = styled.keyframes\`
  \\ 0% {
    color: transparent;
  }
  \\ 100% {
    color: radboats;
  }
\`;

const MyStyledComponent = styled.div\`
  animation: \${mymove} 5s infinite;
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const mymove = styled.keyframes\`
  \\ 0% {
    color: transparent;
  }
  \\ 100% {
    color: radboats;
  }
\`;
const MyStyledComponent = styled.div\`
  animation: \${mymove} 5s infinite;
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 8. adds namespace to extended styled-components: 8. adds namespace to extended styled-components 1`] = `

const styled = () => {};
styled.div = () => {};

const styledDiv = styled.div\`
  width: 100px;
\`;

const MyStyledComponent = styled(styledDiv)\`
  background-color: 'yellow';
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = () => {};
styled.div = () => {};
const styledDiv = styled.div\`
  width: 100px;
\`;
const MyStyledComponent = styled(styledDiv)\`
  background-color: "yellow";
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 9. uses a namespace specified in the options as simple wrapper raw wrapper: 9. uses a namespace specified in the options as simple wrapper raw wrapper 1`] = `

const styled = { div() {} };

const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? 'red' : 'yellow')};
  color: \${(props) => (props.isDark ? 'white' : 'navy')};
  font-size: 30px;
  padding: 20px;

  & {
    border: 1px solid black;
  }
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? "red" : "yellow")};
  color: \${(props) => (props.isDark ? "white" : "navy")};
  font-size: 30px;
  padding: 20px;

  & {
    border: 1px solid black;
  }
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 10. does not add namespace to keyframes as part of the simple raw wrapper: 10. does not add namespace to keyframes as part of the simple raw wrapper 1`] = `

const styled = { div() {} };

const mymove = styled.keyframes\`
  \\ 0% {
    color: transparent;
  }
  \\ 100% {
    color: radboats;
  }
\`;

const MyStyledComponent = styled.div\`
  animation: \${mymove} 5s infinite;
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const mymove = styled.keyframes\`
  \\ 0% {
    color: transparent;
  }
  \\ 100% {
    color: radboats;
  }
\`;
const MyStyledComponent = styled.div\`
  animation: \${mymove} 5s infinite;
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 11. namespaces a style block with &&: 11. namespaces a style block with && 1`] = `

const styled = { input() {} };

export default styled.input\`
  && {
    border: \${(props) => props.borderWidth} solid
      \${(props) => props.borderColor};
  }
\`;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  input() {},
};
export default styled.input\`
  && {
    border: \${(props) => props.borderWidth} solid
      \${(props) => props.borderColor};
  }
\`;

`;

exports[`styled-components-css-namespace 12. namespaces a style block with interpolated selectors: 12. namespaces a style block with interpolated selectors 1`] = `

import styled from 'styled-components';

const Child = styled.span;

export default styled.div\`
  position: relative;
  \${Child} {
    \${(props) => props.childStyles};
  }
  \${Child} + &, & + \${Child} {
    margin-right: \${(props) => props.spaceBetween};
  }
\`;


      ↓ ↓ ↓ ↓ ↓ ↓

import styled from "styled-components";
const Child = styled.span;
export default styled.div\`
  #different-wrapper & {
    position: relative;
  }
  #different-wrapper & #different-wrapper \${Child} {
    \${(props) => props.childStyles};
  }
  #different-wrapper \${Child} + #different-wrapper &,
  #different-wrapper #different-wrapper & + \${Child} {
    margin-right: \${(props) => props.spaceBetween};
  }
\`;

`;

exports[`styled-components-css-namespace 13. does not namespace style blocks in helpers: 13. does not namespace style blocks in helpers 1`] = `

import {
  createGlobalStyle,
  css,
  injectGlobal,
  keyframes,
} from 'styled-components';

export const getBodyColorStyle = (color) => createGlobalStyle\`
  body {
    color: \${color};
  }
\`;

export const injectBodyStyles = (styles) => {
  injectGlobal\`
    body {
      \${styles};
    }
  \`;
};

export const Rotate = keyframes\`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
\`;

export const Clearfix = css\`
  &:after {
    display: table;
    content: '';
    clear: 'both';
  }
\`;


      ↓ ↓ ↓ ↓ ↓ ↓

import {
  createGlobalStyle,
  css,
  injectGlobal,
  keyframes,
} from "styled-components";
export const getBodyColorStyle = (color) => createGlobalStyle\`
  body {
    color: \${color};
  }
\`;
export const injectBodyStyles = (styles) => {
  injectGlobal\`
    body {
      \${styles};
    }
  \`;
};
export const Rotate = keyframes\`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
\`;
export const Clearfix = css\`
  &:after {
    display: table;
    content: "";
    clear: "both";
  }
\`;

`;

exports[`styled-components-css-namespace 14. handles case where styled component ends with expression: 14. handles case where styled component ends with expression 1`] = `

const styled = { div() {} };

const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? 'red' : 'yellow')};
  color: \${(props) => (props.isDark ? 'white' : 'navy')};
  font-size: 30px;
  padding: 20px;

  & {
    border: 1px solid black;
  }

  \${(props) => (props.isDark ? 'color: red' : 'color: white')};
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? "red" : "yellow")};
  color: \${(props) => (props.isDark ? "white" : "navy")};
  font-size: 30px;
  padding: 20px;

  & {
    border: 1px solid black;
  }

  \${(props) => (props.isDark ? "color: red" : "color: white")};
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 15. handles case where styled component has only an expression in a css block: 15. handles case where styled component has only an expression in a css block 1`] = `

const styled = { div() {} };

const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? 'red' : 'yellow')};
  color: \${(props) => (props.isDark ? 'white' : 'navy')};
  font-size: 30px;
  padding: 20px;

  &:hover {
    \${(props) => (props.isDark ? 'color: red' : 'color: white')};
  }
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const MyStyledComponent = styled.div\`
  background-color: \${(props) => (props.isDark ? "red" : "yellow")};
  color: \${(props) => (props.isDark ? "white" : "navy")};
  font-size: 30px;
  padding: 20px;

  &:hover {
    \${(props) => (props.isDark ? "color: red" : "color: white")};
  }
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 16. handles case where styled component has a media query: 16. handles case where styled component has a media query 1`] = `

const styled = { div() {} };

const MyStyledComponent = styled.div\`
  background-color: red;
  @media only screen and (min-width: 426px) {
    background-color: blue;
  }
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const MyStyledComponent = styled.div\`
  background-color: red;
  @media only screen and (min-width: 426px) {
    background-color: blue;
  }
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 17. handles case where there is a comment followed by js: 17. handles case where there is a comment followed by js 1`] = `

const styled = { div() {} };

const MyStyledComponent = styled.div\`
  /* comment */
  \${() => 'color: blue;'}
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const MyStyledComponent = styled.div\`
  /* comment */
  \${() => "color: blue;"}
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 18. handles case where there is a comment followed by a value provided by js: 18. handles case where there is a comment followed by a value provided by js 1`] = `

const styled = { div() {} };

const MyStyledComponent = styled.div\`
  /* comment */
  color: \${() => 'blue'};
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};
const MyStyledComponent = styled.div\`
  /* comment */
  color: \${() => "blue"};
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 19. handles case where the semicolon is provided in js: 19. handles case where the semicolon is provided in js 1`] = `

const styled = { div() {} };

// prettier-ignore
const MyStyledComponent = styled.div\`
  color: \${() => 'color: blue;'}
\`;

export default MyStyledComponent;


      ↓ ↓ ↓ ↓ ↓ ↓

const styled = {
  div() {},
};

// prettier-ignore
const MyStyledComponent = styled.div\`
  color: \${() => 'color: blue;'}
\`;
export default MyStyledComponent;

`;

exports[`styled-components-css-namespace 20. handles re-ordering of template expressions: 20. handles re-ordering of template expressions 1`] = `

import styled from 'styled-components';

/*
  The PostCSS flattening pulls the &:hover and &:active out of the
  main style block, placing it _after_ the main block. Therefore
  the template expressions in those pseudo-class style blocks are
  not in the same relative position in the final processed CSS
  as they were in the original. The bug-fix tracks the _order_ of
  the expressions, so that when they're inserted back into the
  template each expression winds up in the correct position.
 */

export default styled.div\`
  background: \${(props) => props.background};
  border: 1px solid \${(props) => props.borderColor};
  width: 100%;

  \${(props) => props.styles};

  &:hover {
    border-color: \${(props) => props.hoverBorder};
  }

  &:active {
    border-color: \${(props) => props.activeBorder};
    \${props.activeStyles};
  }

  \${(props) => props.moreStyles};
\`;


      ↓ ↓ ↓ ↓ ↓ ↓

import styled from "styled-components";

/*
  The PostCSS flattening pulls the &:hover and &:active out of the
  main style block, placing it _after_ the main block. Therefore
  the template expressions in those pseudo-class style blocks are
  not in the same relative position in the final processed CSS
  as they were in the original. The bug-fix tracks the _order_ of
  the expressions, so that when they're inserted back into the
  template each expression winds up in the correct position.
 */

export default styled.div\`
  .class-wrapper .other-wrapper & {
    background: \${(props) => props.background};
    border: 1px solid \${(props) => props.borderColor};
    width: 100%;

    \${(props) => props.styles};
  }

  .class-wrapper .other-wrapper .class-wrapper .other-wrapper &:hover {
    border-color: \${(props) => props.hoverBorder};
  }

  .class-wrapper .other-wrapper .class-wrapper .other-wrapper &:active {
    border-color: \${(props) => props.activeBorder};
    \${props.activeStyles};
  }

  .class-wrapper .other-wrapper & {
    \${(props) => props.moreStyles};
  }
\`;

`;
